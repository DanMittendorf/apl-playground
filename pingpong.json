{
  "type": "APL",
  "version": "1.4",
  "settings": {},
  "theme": "dark",
  "import": [],
  "resources": [
    {
      "numbers": {
        "matchFieldWidth": "${viewport.width}",
        "matchFieldHeight": "${viewport.height}",
        "paddleWidth": 10,
        "paddleHeight": 100,
        "ballRadius": 10,
        "wallHeight": 4,
        "netWidth": 4,
        "netHeightOutter": 30,
        "netHeightInner": 10,
        "spacingToEdge": 25,
        "playerPaddlePositionX": "@spacingToEdge",
        "cpuPaddlePositionX": "${@matchFieldWidth - @paddleWidth - @spacingToEdge}",
        "initialPlayerPaddlePositionY": "${(@matchFieldHeight - @paddleHeight) / 2}",
        "initialCpuPaddlePositionY": "${(@matchFieldHeight - @paddleHeight) / 2}",
        "initialCpuPaddleSpeed": 8,
        "initialBallVelocityX": 8,
        "initialBallVelocityY": 8,
        "initialBallSpeed": 10,
        "initialBallPositionX": "${@matchFieldWidth / 2}",
        "initialBallPositionY": "${@matchFieldHeight / 2}"
      },
      "strings": {
        "ballDirectionLeft": "LEFT",
        "ballDirectionRight": "RIGHT",
        "initialBallDirection": "@ballDirectionRight"
      }
    }
  ],
  "styles": {},
  "onMount": [],
  "graphics": {
    "Pong": {
      "parameters": [
        "cpuScore",
        "playerScore",
        "ballPositionX",
        "ballPositionY",
        "playerPaddlePositionY",
        "cpuPaddlePositionY"
      ],
      "type": "AVG",
      "resources": [
        {
          "patterns": {
            "Net": {
              "width": "@netWidth",
              "height": "@netHeightOutter",
              "items": [
                {
                  "type": "path",
                  "fill": "#ffffff",
                  "pathData": "M0,0 L${@netWidth},0 L${@netWidth},${@netHeightInner} L0,${@netHeightInner} Z"
                }
              ]
            }
          }
        }
      ],
      "version": "1.1",
      "width": "@matchFieldWidth",
      "height": "@matchFieldHeight",
      "items": [
        {
          "type": "group",
          "description": "Net",
          "translateX": "${(@matchFieldWidth / 2) - (@netWidth / 2)}",
          "items": [
            {
              "type": "path",
              "fill": "@Net",
              "pathData": "M0,0 ${@netWidth},0 L${@netWidth},${@matchFieldHeight} L0,${@matchFieldHeight} Z"
            }
          ]
        },
        {
          "description": "top Wall",
          "type": "path",
          "fill": "#ffffff",
          "pathData": "M0,0 L${@matchFieldWidth},0 L${@matchFieldWidth},${@wallHeight} L0,${@wallHeight} Z"
        },
        {
          "type": "group",
          "description": "bottom Wall",
          "translateY": "${@matchFieldHeight - @wallHeight}",
          "items": [
            {
              "type": "path",
              "fill": "#ffffff",
              "pathData": "M0,0 L${@matchFieldWidth},0 L${@matchFieldWidth},${@wallHeight} L0,${@wallHeight} Z"
            }
          ]
        },
        {
          "type": "group",
          "description": "User paddle",
          "translateX": "@playerPaddlePositionX",
          "translateY": "${playerPaddlePositionY}",
          "items": [
            {
              "type": "path",
              "fill": "#ffffff",
              "pathData": "M0,0 L${@paddleWidth},0 L${@paddleWidth},${@paddleHeight} L0,${@paddleHeight} Z"
            }
          ]
        },
        {
          "type": "group",
          "description": "CPU paddle",
          "translateX": "@cpuPaddlePositionX",
          "translateY": "${cpuPaddlePositionY}",
          "items": [
            {
              "type": "path",
              "fill": "#ffffff",
              "pathData": "M0,0 L${@paddleWidth},0 L${@paddleWidth},${@paddleHeight} L0,${@paddleHeight} Z"
            }
          ]
        },
        {
          "type": "group",
          "description": "Ball",
          "translateX": "${ballPositionX}",
          "translateY": "${ballPositionY}",
          "items": [
            {
              "type": "path",
              "fill": "#ffffff",
              "pathData": "M-${@ballRadius},0a${@ballRadius},${@ballRadius} 0 1,0 ${@ballRadius * 2},0a${@ballRadius},${@ballRadius} 0 1,0 -${@ballRadius * 2},0"
            }
          ]
        },
        {
          "type": "text",
          "fill": "#ffffffd9",
          "fontFamily": "amazon-ember",
          "fontSize": 100,
          "fontWeight": "900",
          "text": "${playerScore}",
          "x": "${@matchFieldWidth / 4}",
          "y": "${@matchFieldHeight / 5}",
          "textAnchor": "middle"
        },
        {
          "type": "text",
          "fill": "#ffffffd9",
          "fontFamily": "amazon-ember",
          "fontSize": 100,
          "fontWeight": "900",
          "text": "${cpuScore}",
          "x": "${3 * @matchFieldWidth / 4}",
          "y": "${@matchFieldHeight / 5}",
          "textAnchor": "middle"
        }
      ]
    }
  },
  "commands": {
    "ResetGame": {
      "parameters": [],
      "commands": [
        {
          "type": "SetValue",
          "property": "ballPositionX",
          "value": "@initialBallPositionX"
        },
        {
          "type": "SetValue",
          "property": "ballPositionY",
          "value": "@initialBallPositionY"
        },
        {
          "type": "SetValue",
          "property": "ballSpeed",
          "value": "@initialBallSpeed"
        },
        {
          "type": "SetValue",
          "property": "ballVelocityY",
          "value": "@initialBallVelocityY"
        }
      ]
    },
    "CheckEndOfRound": {
      "commands": [
        {
          "when": "${ballPositionX - @ballRadius < 0}",
          "type": "Sequential",
          "commands": [
            {
              "type": "ResetGame"
            },
            {
              "type": "SetValue",
              "property": "cpuScore",
              "value": "${cpuScore + 1}"
            }
          ]
        },
        {
          "when": "${(ballPositionX - @ballRadius) > @matchFieldWidth}",
          "type": "Sequential",
          "commands": [
            {
              "type": "ResetGame"
            },
            {
              "type": "SetValue",
              "property": "playerScore",
              "value": "${playerScore + 1}"
            },
            {
              "type": "SetValue",
              "property": "cpuPaddleSpeed",
              "value": "${cpuPaddleSpeed + 1}"
            }
          ]
        }
      ]
    },
    "CheckCollision": {
      "parameters": [
        {
          "name": "paddlePositionX",
          "default": "${ballDirection == @ballDirectionLeft ? (@playerPaddlePositionX + @paddleWidth) : (@cpuPaddlePositionX - @paddleWidth)}"
        },
        {
          "name": "paddlePositionY",
          "default": "${ballDirection == @ballDirectionLeft ? playerPaddlePositionY : cpuPaddlePositionY}"
        },
        {
          "name": "isWithinX",
          "default": "${(ballPositionX - @ballRadius) <= paddlePositionX && ballPositionX >= (paddlePositionX - @paddleWidth)}"
        },
        {
          "name": "isWithinY",
          "default": "${ballPositionY <= (paddlePositionY + @paddleHeight) && (ballPositionY + @ballRadius) >= paddlePositionY}"
        }
      ],
      "commands": [
        {
          "when": "${isWithinX && isWithinY}",
          "type": "Sequential",
          "commands": [
            {
              "type": "SetValue",
              "property": "ballPositionX",
              "value": "${paddlePositionX}"
            },
            {
              "type": "SetValue",
              "property": "pointOfCollision",
              "value": "${(ballPositionY - (paddlePositionY + @paddleHeight / 2)) / (@paddleHeight / 2)}"
            },
            {
              "type": "SetValue",
              "property": "ballVelocityX",
              "value": "${((ballPositionX + @ballRadius < @matchFieldHeight / 2) ? 1 : -1) * ballSpeed * Math.cos((Math.PI / 4) * pointOfCollision)}"
            },
            {
              "type": "SetValue",
              "property": "ballVelocityY",
              "value": "${ballSpeed * Math.sin((Math.PI / 4) * pointOfCollision)}"
            },
            {
              "type": "SetValue",
              "property": "ballSpeed",
              "value": "${Math.clamp(0, ballSpeed + 1, 25)}"
            },
            {
              "type": "SetValue",
              "property": "ballDirection",
              "value": "${ballDirection == @ballDirectionRight ? @ballDirectionLeft : @ballDirectionRight}"
            }
          ]
        }
      ]
    },
    "UpdateBallPosition": {
      "commands": [
        {
          "type": "SetValue",
          "property": "ballPositionX",
          "value": "${ballPositionX + ballVelocityX}"
        },
        {
          "type": "SetValue",
          "property": "ballPositionY",
          "value": "${ballPositionY + ballVelocityY}"
        },
        {
          "when": "${ballPositionY - @ballRadius < @wallHeight || ballPositionY + @ballRadius > (@matchFieldHeight - @wallHeight)}",
          "description": "ball hits the wall",
          "type": "SetValue",
          "property": "ballVelocityY",
          "value": "${ballVelocityY * -1}"
        }
      ]
    },
    "UpdateCpuPaddlePosition": {
      "commands": [
        {
          "when": "${cpuPaddlePositionY > (ballPositionY - (@paddleHeight / 2))}",
          "type": "Select",
          "commands": [
            {
              "when": "${ballDirection == @ballDirectionRight}",
              "type": "SetValue",
              "property": "cpuPaddlePositionY",
              "value": "${cpuPaddlePositionY - (cpuPaddleSpeed / 1.5)}"
            }
          ],
          "otherwise": [
            {
              "type": "SetValue",
              "property": "cpuPaddlePositionY",
              "value": "${cpuPaddlePositionY - (cpuPaddleSpeed / 4)}"
            }
          ]
        },
        {
          "when": "${cpuPaddlePositionY < (ballPositionY - (@paddleHeight / 2))}",
          "type": "Select",
          "commands": [
            {
              "when": "${ballDirection == @ballDirectionRight}",
              "type": "SetValue",
              "property": "cpuPaddlePositionY",
              "value": "${cpuPaddlePositionY + (cpuPaddleSpeed / 1.5)}"
            }
          ],
          "otherwise": [
            {
              "type": "SetValue",
              "property": "cpuPaddlePositionY",
              "value": "${cpuPaddlePositionY + (cpuPaddleSpeed / 4)}"
            }
          ]
        },
        {
          "when": "${(cpuPaddlePositionY + @paddleHeight) > (@matchFieldHeight - @wallHeight)}",
          "type": "SetValue",
          "property": "cpuPaddlePositionY",
          "value": "${@matchFieldHeight - @wallHeight - @paddleHeight}"
        },
        {
          "when": "${cpuPaddlePositionY < @wallHeight}",
          "type": "SetValue",
          "property": "cpuPaddlePositionY",
          "value": "@wallHeight"
        }
      ]
    }
  },
  "layouts": {},
  "mainTemplate": {
    "parameters": [
      "payload"
    ],
    "items": [
      {
        "type": "VectorGraphic",
        "source": "Pong",
        "width": "@matchFieldWidth",
        "height": "@matchFieldHeight",
        "bind": [
          {
            "name": "cpuScore",
            "type": "number",
            "value": "0"
          },
          {
            "name": "playerScore",
            "type": "number",
            "value": "0"
          },
          {
            "name": "pointOfCollision",
            "type": "number",
            "value": "0"
          },
          {
            "name": "ballVelocityX",
            "type": "number",
            "value": "@initialBallVelocityX"
          },
          {
            "name": "ballVelocityY",
            "type": "number",
            "value": "@initialBallVelocityY"
          },
          {
            "name": "ballSpeed",
            "type": "number",
            "value": "@initialBallSpeed"
          },
          {
            "name": "ballPositionX",
            "type": "number",
            "value": "@initialBallPositionX"
          },
          {
            "name": "ballPositionY",
            "type": "number",
            "value": "@initialBallPositionY"
          },
          {
            "name": "playerPaddlePositionY",
            "type": "number",
            "value": "@initialPlayerPaddlePositionY"
          },
          {
            "name": "cpuPaddlePositionY",
            "type": "number",
            "value": "@initialCpuPaddlePositionY"
          },
          {
            "name": "ballDirection",
            "type": "string",
            "value": "@initialBallDirection"
          },
          {
            "name": "cpuPaddleSpeed",
            "type": "number",
            "value": "@initialCpuPaddleSpeed"
          }
        ],
        "onDown": [
          {
            "type": "Idle"
          }
        ],
        "onUp": [
          {
            "type": "Idle"
          }
        ],
        "onMove": [
          {
            "type": "SetValue",
            "property": "playerPaddlePositionY",
            "value": "${Math.clamp(@wallHeight, event.component.y - @paddleHeight, @matchFieldHeight - @wallHeight)}"
          }
        ],
        "ballPositionX": "${ballPositionX}",
        "ballPositionY": "${ballPositionY}",
        "cpuScore": "${cpuScore}",
        "playerScore": "${playerScore}",
        "cpuPaddlePositionY": "${cpuPaddlePositionY}",
        "playerPaddlePositionY": "${playerPaddlePositionY}",
        "handleTick": [
          {
            "minimumDelay": "${1000 / 60}",
            "commands": [
              {
                "type": "CheckCollision"
              },
              {
                "type": "CheckEndOfRound"
              },
              {
                "type": "UpdateBallPosition"
              },
              {
                "type": "UpdateCpuPaddlePosition"
              }
            ]
          }
        ]
      }
    ]
  }
}